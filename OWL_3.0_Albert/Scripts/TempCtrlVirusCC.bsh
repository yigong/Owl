import javax.swing.border.TitledBorder;
import owl.cameraAPI.CameraAPI;
import owl.cameraAPI.ReplyException;
import owl.CCParams.CCScriptFrame;
import owl.main.owltypes.OwlBoldButton;
import owl.main.owltypes.OwlNumberField;
import owl.gui.utils.OwlUtilities;


public class VirusTempCtrlFrame extends CCScriptFrame implements Runnable
{
	final String RUN_ACTION		=	"RUN";
	final String STOP_ACTION	=	"ABORT";

	final double TEMP_CONST1	=	168.7;
	final double TEMP_CONST2	=	0.004186;

	final double HEATER_CONST1	=	0.010;
	final double HEATER_CONST2	=	0.000075684;

	final int CDT				=	0x434454;
	final int RDT				=	0x524454;
	final int RHV				=	0x524856;

	final int LEFT_SIDE_ID		=	0;
	final int RIGHT_SIDE_ID		=	1;
	final int COLD_FINGER_ID	=	2;

	JToolBar			m_toolbar;
	OwlBoldButton		m_runButton;
	OwlNumberField		m_leftSideTxtfld;
	OwlNumberField		m_rightSideTxtfld;
	OwlNumberField		m_leftDisplayTxtfld;
	OwlNumberField		m_rightDisplayTxtfld;
	OwlNumberField		m_leftVoltgeTxtfld;
	OwlNumberField		m_rightVoltgeTxtfld;
	OwlNumberField		m_coldFingerTxtfld;
	JCheckBox			m_leftSideCheckBox;
	JCheckBox			m_rightSideCheckBox;


	public VirusTempCtrlFrame()
	{
		super( "TempCtrl VIRUS" );

		m_toolbar = new JToolBar();
		m_toolbar.setFloatable( false );

		m_runButton = createBoldToolbarButton( RUN_ACTION, Color.red );
		m_toolbar.add( m_runButton );

		appendToolbar( m_toolbar );

		getContentPane().add( m_toolbar, BorderLayout.PAGE_START );
		getContentPane().add( createComponents(), BorderLayout.CENTER );

		pack();
		OwlUtilities.centerFrame( this );

		loadPreferences();
	}

	public void actionPerformed( ActionEvent event )
	{
		if ( event.getActionCommand().equals( RUN_ACTION ) )
		{
			new Thread( this ).start();
		}

		else
		{
			super.actionPerformed( event );
		}
	}

	public void destroy()
	{
		dispose();
	}

	public void run()
	{
		m_runButton.setColored( STOP_ACTION );

		try
		{
			adu = 0xFFFFFF;

			if ( m_leftSideCheckBox.isSelected() )
			{
				adu = calculateADU( m_leftSideTxtfld.getDouble() );
			}

			logger.infoStart( "Sending LEFT control info" );
			CameraAPI.Cmd( CameraAPI.TIM_ID, CDT, LEFT_SIDE_ID, adu, CameraAPI.DON );
			logger.infoEnd();

			adu = 0xFFFFFF;

			if ( m_rightSideCheckBox.isSelected() )
			{
				adu = calculateADU( m_rightSideTxtfld.getDouble() );
			}

			logger.infoStart( "Sending RIGHT control info" );
			CameraAPI.Cmd( CameraAPI.TIM_ID, CDT, RIGHT_SIDE_ID, adu, CameraAPI.DON );
			logger.infoEnd();

			logger.infoStart( "Reading LEFT temperature" );
			adu = CameraAPI.Cmd2( CameraAPI.TIM_ID, RDT, LEFT_SIDE_ID );
			logger.infoEnd();

			m_leftDisplayTxtfld.setValue( calculateTemp( adu ), "%.1f" );

			logger.infoStart( "Reading LEFT heater voltage" );
			hv = CameraAPI.Cmd2( CameraAPI.TIM_ID, RHV, LEFT_SIDE_ID );
			logger.infoEnd();

			m_leftVoltgeTxtfld.setValue( calculateVoltage( hv ), "%.3f" );

			logger.infoStart( "Reading RIGHT temperature" );
			adu = CameraAPI.Cmd2( CameraAPI.TIM_ID, RDT, RIGHT_SIDE_ID );
			logger.infoEnd();

			m_rightDisplayTxtfld.setValue( calculateTemp( adu ), "%.1f" );

			logger.infoStart( "Reading RIGHT heater voltage" );
			hv = CameraAPI.Cmd2( CameraAPI.TIM_ID, RHV, RIGHT_SIDE_ID );
			logger.infoEnd();

			m_rightVoltgeTxtfld.setValue( calculateVoltage( hv ), "%.3f" );

			logger.infoStart( "Reading COLD FINGER temperature" );
			adu = CameraAPI.Cmd2( CameraAPI.TIM_ID, RDT, COLD_FINGER_ID );
			logger.infoEnd();

			m_coldFingerTxtfld.setValue( calculateTemp( adu ), "%.1f" );

			fireScriptApplied();
		}
		catch ( Exception e )
		{
			logger.infoFail();
			logger.error( e.getMessage() );
		}
		finally
		{
			m_runButton.setBlack( RUN_ACTION );
		}
	}

	private JPanel createComponents()
	{
		JPanel panel = new JPanel();
		panel.setLayout( gbl );

		targetLabel = new JLabel( "<html><b><u><font color=\"#880000\">TARGET TEMP C</font></u></b></html>" );
		ctrlLabel   = new JLabel( "<html><b><u><font color=\"#008800\">CTRL</font></u></b></html>" );
		actualLabel = new JLabel( "<html><b><u><font color=\"#000088\">ACTUAL TEMP C</font></u></b></html>" );
		voltgeLabel = new JLabel( "<html><b><u><font color=\"#880088\">HEATER VOLTAGE</font></u></b></html>" );

		leftSideLabel  = new JLabel( "Left Side A: " );
		rightSideLabel = new JLabel( "Right Side B: " );

		m_leftSideTxtfld = new OwlNumberField( "", 7 );
		m_rightSideTxtfld = new OwlNumberField( "", 7 );

		m_leftDisplayTxtfld = new OwlNumberField( "", 9 );
		m_leftDisplayTxtfld.setEditable( false );

		m_leftVoltgeTxtfld = new OwlNumberField( "", 9 );
		m_leftVoltgeTxtfld.setEditable( false );

		m_rightDisplayTxtfld = new OwlNumberField( "", 9 );
		m_rightDisplayTxtfld.setEditable( false );

		m_rightVoltgeTxtfld = new OwlNumberField( "", 9 );
		m_rightVoltgeTxtfld.setEditable( false );

		m_leftSideCheckBox  = new JCheckBox();
		m_rightSideCheckBox = new JCheckBox();

		coldFingerLabel = new JLabel( "Cold Finger  . . . . . . . . . . . . . . . . " );

		m_coldFingerTxtfld = new OwlNumberField( "", 9 );
		m_coldFingerTxtfld.setEditable( false );

		addComponent( panel, targetLabel,         9, 0, 5, 0, GridBagConstraints.NONE, GridBagConstraints.CENTER, 0, 0, 1, 2 );
		addComponent( panel, ctrlLabel,           9, 5, 5, 0, GridBagConstraints.NONE, GridBagConstraints.CENTER, 0, 2, 1, 1 );
		addComponent( panel, actualLabel,         9, 5, 5, 0, GridBagConstraints.NONE, GridBagConstraints.CENTER, 0, 3, 1, 1 );
		addComponent( panel, voltgeLabel,         9, 9, 5, 9, GridBagConstraints.NONE, GridBagConstraints.CENTER, 0, 4, 1, 1 );

		addComponent( panel, leftSideLabel,       0, 9, 5, 0, GridBagConstraints.NONE, GridBagConstraints.WEST,   1, 0, 1, 1 );
		addComponent( panel, m_leftSideTxtfld,    0, 5, 5, 0, GridBagConstraints.NONE, GridBagConstraints.WEST,   1, 1, 1, 1 );
		addComponent( panel, m_leftSideCheckBox,  0, 5, 5, 0, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1, 2, 1, 1 );
		addComponent( panel, m_leftDisplayTxtfld, 0, 8, 5, 9, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1, 3, 1, 1 );
		addComponent( panel, m_leftVoltgeTxtfld,  0, 9, 5, 9, GridBagConstraints.NONE, GridBagConstraints.CENTER, 1, 4, 1, 1 );

		addComponent( panel, rightSideLabel,       0, 9, 5, 0, GridBagConstraints.NONE, GridBagConstraints.WEST,   2, 0, 1, 1 );
		addComponent( panel, m_rightSideTxtfld,    0, 5, 5, 0, GridBagConstraints.NONE, GridBagConstraints.WEST,   2, 1, 1, 1 );
		addComponent( panel, m_rightSideCheckBox,  0, 5, 5, 0, GridBagConstraints.NONE, GridBagConstraints.CENTER, 2, 2, 1, 1 );
		addComponent( panel, m_rightDisplayTxtfld, 0, 8, 5, 9, GridBagConstraints.NONE, GridBagConstraints.CENTER, 2, 3, 1, 1 );
		addComponent( panel, m_rightVoltgeTxtfld,  0, 8, 5, 9, GridBagConstraints.NONE, GridBagConstraints.CENTER, 2, 4, 1, 1 );

		addComponent( panel, coldFingerLabel,    0, 9, 9, 0, GridBagConstraints.NONE, GridBagConstraints.WEST,   3, 0, 1, 3 );
		addComponent( panel, m_coldFingerTxtfld, 0, 8, 9, 9, GridBagConstraints.NONE, GridBagConstraints.CENTER, 3, 3, 1, 1 );

		return panel;
	}

	private int calculateADU( double temp )
	{
		return ( int )( ( temp + TEMP_CONST1 ) / TEMP_CONST2 );
	}

	private double calculateTemp( int adu )
	{
		return ( ( -1.0 * TEMP_CONST1 ) + ( TEMP_CONST2 * adu ) );
	}

	private double calculateVoltage( int hv )
	{
		return ( HEATER_CONST1 + ( ( double )hv * HEATER_CONST2 ) );
	}
}


TempCtrlVirusCC()
{
	CCScriptFrame frame =
			( CCScriptFrame )( new VirusTempCtrlFrame() );

	frame.setVisible( true );

	return frame;
}


t = TempCtrlVirusCC();
t.show();
